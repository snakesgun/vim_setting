{
  "Create tornado request handler": {
    "prefix": "cthandler",
    "body": [
      "import tornado\nimport tornado.web\nimport tornado.escape\n\nimport json\nimport logging\n",
      "logger = logging.getLogger(__name__)\n\n",
      "class $TM_FILENAME_BASE(tornado.web.RequestHandler):",
      "\tdef set_default_headers(self):",
      "\t\tself.set_header(\"Access-Control-Allow-Origin\", \"*\")",
      "\t\tself.set_header(\"Access-Control-Allow-Headers\", \"content-type\")\n\n",
      "\tdef post(self):",
      "\t\tresult_dict = {}",
      "\t\ttry:\n\t\t\trequest_str = self.request.body\n\t\t\trequest_dict = tornado.escape.json_decode(request_str)\n\t\t\t$0",
      "\t\texcept Exception as e:\n\t\t\tresult_dict['statusCode'] = 2\n\t\t\tresult_dict['errorCode'] = e.__str__()",
      "\t\telse:\n\t\t\tpass",
      "\t\tfinally:\n\t\t\tself.write(json.dumps(result_dict))\n",
      "\tdef options(self):",
      "\t\tself.set_status(204)",
      "\t\tself.finish()\n"
    ],
    "description": "Generate Tornado Request Handler"
  },
  "Create tornado web service main file": {
    "prefix": "cwebmain",
    "body": [
      "import tornado.httpserver\nimport tornado.ioloop\nimport tornado.options\nimport tornado.web\n",
      "import signal\nimport logging\n",
      "from tornado.options import define, options\n",
      "logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')",
      "logger = logging.getLogger(__name__)",
      "define(\"port\", default=9001, help=\"run on the given port\", type=int)\n\n",
      "class MainHandler(tornado.web.RequestHandler):",
      "\tdef get(self):",
      "\t\tself.write(\"Server started successfully on port %d\" % (options.port))\n\n",
      "if __name__ == \"__main__\":",
      "\tdef sig_handler(sig, frame):",
      "\t\tlogging.warning('Caught signal: %s', sig)",
      "\t\ttornado.ioloop.IOLoop.instance().add_callback_from_signal(shutdown)\n",
      "\tdef shutdown():",
      "\t\tlogging.info('Stopping http server')",
      "\t\thttp_server.stop()",
      "\t\tlogging.info('Will shutdown in 20 seconds ...')",
      "\t\tio_loop = tornado.ioloop.IOLoop.instance()\n",
      "\t\tdef stop_loop():",
      "\t\t\tio_loop.stop()",
      "\t\t\tlogging.info('Shutdown')",
      "\t\tstop_loop()\n",
      "\tbasic_router = r'/'",
      "\ttry:",
      "\t\tprint(\"Starting the sever on port %d\" % (options.port))",
      "\t\ttornado.options.parse_command_line()",
      "\t\tapp = tornado.web.Application(",
      "\t\t\thandlers=[",
      "\t\t\t\t(r'/', MainHandler)",
      "\t\t\t],",
      "\t\t\tautoreload=True",
      "\t\t)",
      "\t\thttp_server = tornado.httpserver.HTTPServer(app)",
      "\t\thttp_server.listen(options.port)",
      "\t\tsignal.signal(signal.SIGTERM, sig_handler)",
      "\t\tsignal.signal(signal.SIGINT, sig_handler)",
      "\t\ttornado.ioloop.IOLoop.current().start()",
      "\texcept KeyboardInterrupt:",
      "\t\tprint(\"Closing Server...\")",
      "\t\tprint(\"Server Closed, bye!\")\n"
    ],
    "description": "Generate general code of tornado web service main file"
  },
  "Default Header": {
    "prefix": "header",
    "body": [
      "#!/usr/bin/env python3",
      "# -*- coding: utf-8 -*-",
      "",
      "\"\"\"",
      "${1:Enter description of this module}.",
      "",
      "__Author__ = snakesgun",
      "__Version__ = 1.0",
      "__Maintainer__ = snakesgun",
      "__Email__ = snakesgun@gmail.com",
      "__Status__ = ${2|Dev,Test,Prod|}",
      "__Date__ = $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
      "\"\"\"",
      "$0"
    ],
    "description": "Default header"
  }
}

